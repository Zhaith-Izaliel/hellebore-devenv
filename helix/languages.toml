[language-server]
deno = { command = "deno", args = ["lsp"] }
emmet-ls = { command = "emmet-ls", args = ["--stdio"] }
ccls = { command = "ccls" }
nixd = { command = "nixd" }

[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language-server.vscode-css-language-server.config]
provideFormatter = true
css = { validate = { enable = true } }

[[language-server.vscode-css-language-server.config.atDirectives]]
name = "@tailwind"
description = "Use the `@tailwind` directive to insert Tailwind's `base`, `components`, `utilities` and `screens` styles into your CSS."

[[language-server.vscode-css-language-server.config.atDirectives.references]]
name = "Tailwind Documentation"
url = "https://tailwindcss.com/docs/functions-and-directives#tailwind"

[[language-server.vscode-css-language-server.config.atDirectives]]
name = "@apply"
description = "Use the `@apply` directive to inline any existing utility classes into your own custom CSS. This is useful when you find a common utility pattern in your HTML that you’d like to extract to a new component."

[[language-server.vscode-css-language-server.config.atDirectives.references]]
name = "Tailwind Documentation"
url = "https://tailwindcss.com/docs/functions-and-directives#apply"

[[language-server.vscode-css-language-server.config.atDirectives]]
name = "@responsive"
description = """
You can generate responsive variants of your own classes by wrapping their definitions in the `@responsive` directive:
```css
@responsive {
  .alert {
    background-color: #E53E3E;
  }
}
```
"""

[[language-server.vscode-css-language-server.config.atDirectives.references]]
name = "Tailwind Documentation"
url = "https://tailwindcss.com/docs/functions-and-directives#responsive"

[[language-server.vscode-css-language-server.config.atDirectives]]
name = "@screen"
description = """
The `@screen` directive allows you to create media queries that reference your breakpoints by **name** instead of duplicating their values in your own CSS:
```css
@screen sm {
  /* ... */
}
```
…gets transformed into this:
```css
@media (min-width: 640px) {
  /* ... */
}
```
"""

[[language-server.vscode-css-language-server.config.atDirectives.references]]
name = "Tailwind Documentation"
url = "https://tailwindcss.com/docs/functions-and-directives#screen"

[[language-server.vscode-css-language-server.config.atDirectives]]
name = "@variants"
description = """
Generate `hover`, `focus`, `active` and other **variants** of your own utilities by wrapping their definitions in the `@variants` directive:
```css
@variants hover, focus {
   .btn-brand {
    background-color: #3182CE;
  }
}
```
"""

[[language-server.vscode-css-language-server.config.atDirectives.references]]
name = "Tailwind Documentation"
url = "https://tailwindcss.com/docs/functions-and-directives#variants"

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20    # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true        # completions will return before snippets by default
feature_words = true         # enable completion by word
feature_snippets = true      # enable snippets
feature_unicode_input = true # enable "unicode input"

[language-server.stylelint-ls]
command = "stylelint-lsp"
args = ["--stdio"]

[language-server.stylelint-ls.config.stylelintplus]
autoFixOnSave = true
autoFixOnFormat = true

[language-server.stylelint-ls.config.stylelintplus.config.rules]
at-rule-no-unknown = [
  true,
  { ignoreAtRules = [
    "apply",
    "screen",
    "tailwind",
    "config",
    "layer",
    "variants",
    "responsive",
  ] },
]
function-no-unknown = [true, { ignoreFunctions = ["theme"] }]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all" }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[[language]]
name = "git-commit"
language-servers = ["scls"]

[[language]]
name = "typescript"
language-servers = ["eslint", "typescript-language-server", "slcs"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [
  "deno",
  "typescript-language-server",
  "eslint",
  "emmet-ls",
  "slcs",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "eslint", "slcs"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [
  "typescript-language-server",
  "eslint",
  "emmet-ls",
  "tailwindcss-ls",
  "scls",
]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "html"
language-servers = [
  "vscode-html-language-server",
  "emmet-ls",
  "tailwindcss-ls",
  "scls",
  "vscode-css-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
file-types = ["css", "scss", "less"]
language-servers = [
  "stylelint-ls",
  "emmet-ls",
  "tailwindcss-ls",
  "scls",
  "vscode-css-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

[[language]]
name = "vue"
language-servers = [
  "typescript-language-server",
  "vscode-html-language-server",
  "eslint",
  "emmet-ls",
  "tailwindcss-ls",
  "scls",
  "vscode-css-language-server",
]
formatter = { command = 'prettier', args = ["--parser", "vue"] }
auto-format = true

[[language]]
name = "nix"
language-servers = ["nixd", "nil", "scls"]
formatter = { command = "alejandra", args = ["--quiet"] }
auto-format = true

[[language]]
name = "lua"
language-servers = ["lua-language-server", "scls"]
formatter = { command = "stylua", args = ["-"] }
auto-format = true

[[language]]
name = "toml"
language-servers = ["taplo", "scls"]
formatter = { command = "taplo", args = ["format", "-"] }
auto-format = true

[[language]]
name = "haskell"
language-servers = ["haskell-language-server", "scls"]
formatter = { command = "stylish-haskell", args = [] }
auto-format = true

[[language]]
name = "c"
language-servers = ["ccls", "scls"]
auto-format = true

[[language]]
name = "cpp"
language-servers = ["ccls", "scls"]
auto-format = true

[[languages]]
name = "go"
language-servers = ["gopls", "scls"]
formatter = { command = "goimports", args = [] }
auto-format = true

[[language]]
name = "markdown"
language-servers = ["marksman", "ltex-ls", "scls"]
formatter = { command = "mdformat", args = ["-"] }
auto-format = true

[[language]]
name = "latex"
language-servers = ["texlab", "ltex-ls", "scls"]
auto-format = true

[[language]]
name = "graphql"
language-servers = ["graphql-language-service", "scls"]
auto-format = true

[[language]]
name = "bash"
language-servers = ["bash-language-server", "scls"]
indent = { tab-width = 2, unit = "  " }
formatter = { command = 'shfmt', args = ["-i", "2"] }
auto-format = true

[[language]]
name = "scss"
language-servers = [
  "stylelint-ls",
  "emmet-ls",
  "tailwindcss-ls",
  "scls",
  "vscode-css-language-server",
]
formatter = { command = "prettier", args = ["--parser", "scss"] }
auto-format = true

[[language]]
name = "java"
language-servers = ["jdtls", "scls"]
indent = { tab-width = 4, unit = "    " }
formatter = { command = "google-java-format", args = ["-"] }
auto-format = true
